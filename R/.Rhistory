w1 = 0.13, ## linear
w2 = -.05 / sqrt(npds), ## quadratic
w2.shift = -round( sqrt(npds)*.7 ), ## quadratic shift rightward (make all of U-shape after intervention)
## focal parameters of outcome function (manipulated in sensitivity analysis)
b4 = 1.0,   ## seasonal component weight
b5 = 0.04,  ## yearly growth rate
b9 = 0,     ## autocorrelation
##
expect.mod.size = 1  # number of covariates included in BSTS model of counterfactual
)
## SIMULATION LIST HOLDER
simlist <- list()
## state space configuration used as label
key <- '1_level'
## SImulations list (for comparisons, gridsearches; use list length==1 for single model run)
simlist[[ key ]] <- sim.config
## Simulation ID
sim.id <- round(10*as.numeric(Sys.time()))
##-------------------------------------------------------
### CREATING ILLUSTRATION SIMULATION IF NONE EXISTS
data.filepath <- file.path(dir_proj, 'bsts_vignette_illustration_sim_dataframe.csv')
if ( ! file.exists(data.filepath) ) {
cat(sprintf('Illustration data file not found in project dir:\n %s.\nSimulating new illustration data set.',dir_proj))
## RUN SIMULATION -  GENERATE TIME SERIES
simlist <- runSimUpdateSimlist(simlist, effect.types = effect.types,
sim.id = sim.id, plot.show = F, plot.save = F )
# ## Save simulation for reuse with multiple BSTS models
# simcopy <- simlist[[key]]
## SAVE SIMULATED DATAFRAME TO FILE
simdf <- simlist[[key]]$sim$df
cols.to.front <- c('t','actor','y','x1','x2','x3','c1','c2','c3','b1','b2','b3','u','v','season.val')
cols.to.back <- c('effect.type','t.post.intpd','group','group.color','match_id','match_pd')
simdf <- simdf[, c(cols.to.front, cols.to.back)]
write.csv(simdf, file=data.filepath, row.names=F, na='')
}
##--------------------------------------------------------
### SUMMARIZE BSTS (single-observation) SERIES - WITH DIFFERENT COVARIATE PREDICTORS
bsts.df1.filepath <- file.path(dir_proj, 'bsts_vignette_illustration_bsts-1-NOctrl_df.csv')
bsts.df2.filepath <- file.path(dir_proj, 'bsts_vignette_illustration_bsts-2-ONEctrl_df.csv')
bsts.df3.filepath <- file.path(dir_proj, 'bsts_vignette_illustration_bsts-3-SYNTHctrl_df.csv')
f1exists <- file.exists(bsts.df1.filepath)
f2exists <- file.exists(bsts.df2.filepath)
f3exists <- file.exists(bsts.df3.filepath)
file.exists(data.filepath) & any(!f1exists, !f2exists, !f3exists)
simdf <- read.csv(data.filepath, stringsAsFactors = F) ## don't auto convert chars to factor type
simdf <- read.csv(data.filepath, stringsAsFactors = F) ## don't auto convert chars to factor type
simdf <- as.tibble(simdf)
## TREATMENT
bsts.df <- simdf %>%
dplyr::filter(
! is.na(match_id),
group=='treatment'
) %>%
group_by(t) %>%
summarize(
y_treatment = mean(y, na.rm=T)
)
bsts.df
!f1exists
## NO UNTREATED CONTROL GROUP - ONLY COVARIATES
if (!f1exists) {
cov.df.wide <- simdf %>%
dplyr::filter(
! is.na(match_id),
group=='control'
) %>%
group_by(t) %>%
dplyr::summarize(
c1_mean = mean(c1, na.rm=T),
c2_mean = mean(c2, na.rm=T),
c3_mean = mean(c3, na.rm=T),
c1_sd = sd(c1, na.rm=T),
c2_sd = sd(c2, na.rm=T),
c3_sd = sd(c3, na.rm=T),
c1_skew = ifelse(length(c1)<=1, NA, skewness(c1, na.rm = T, type = 2)),
c2_skew = ifelse(length(c2)<=1, NA, skewness(c2, na.rm = T, type = 2)),
c3_skew = ifelse(length(c3)<=1, NA, skewness(c3, na.rm = T, type = 2))#,
) #%>% pivot_wider(names_from, values_from)
bsts.df1 <- bsts.df %>% full_join(cov.df.wide, by='t')
bsts.df1$t <- NULL
write.csv(bsts.df1, file=bsts.df1.filepath, row.names = F, na = '')
}
bsts.df1
## 1 UNTREATED CONTROL GROUP  +  COVARIATES
if (!f2exists) {
cov.df.wide <- simdf %>%
dplyr::filter(
! is.na(match_id),
group=='control'
) %>%
group_by(t) %>%
dplyr::summarize(
y_control = mean(y, na.rm=T),
c1_mean = mean(c1, na.rm=T),
c2_mean = mean(c2, na.rm=T),
c3_mean = mean(c3, na.rm=T),
c1_sd = sd(c1, na.rm=T),
c2_sd = sd(c2, na.rm=T),
c3_sd = sd(c3, na.rm=T),
c1_skew = ifelse(length(c1)<=1, NA, skewness(c1, na.rm = T, type = 2)),
c2_skew = ifelse(length(c2)<=1, NA, skewness(c2, na.rm = T, type = 2)),
c3_skew = ifelse(length(c3)<=1, NA, skewness(c3, na.rm = T, type = 2))#,
) #%>% pivot_wider(names_from, values_from)
bsts.df2 <- bsts.df %>% full_join(cov.df.wide, by='t')
bsts.df2$t <- NULL
write.csv(bsts.df2, file=bsts.df2.filepath, row.names = F, na = '')
}
bsts.df2
!f3exists
## SYNETHIC CONTRL GROUPS FROM COVARIATES CATEGORIES MEAN OUTCOME SERIES
if (!f3exists) {
## c1 covariates categories
c1cats <- cut(simdf$c1, bsts.ctrl.cats)
simdf$c1.f <- LETTERS[as.integer(as.factor(c1cats))]
## c2  covariate categories
c2cats <- cut(simdf$c2, bsts.ctrl.cats)
simdf$c2.f <- LETTERS[as.integer(as.factor(c2cats))]
##
c3cats <- cut(simdf$c3, bsts.ctrl.cats)
simdf$c3.f <- LETTERS[as.integer(as.factor(c3cats))]
### SYNTHETIC CONTROL GROUPS
.cov.df <- simdf %>%
dplyr::filter(
! is.na(match_id),
group=='control'
) %>%
group_by(t, c3.f, c2.f, c1.f) %>%
dplyr::summarize(
cov_mean = mean(y, na.rm=T)
)
.cov.df$cov_cat.f <- apply(.cov.df[,c('c1.f','c2.f','c3.f')], 1, function(x)paste(x,collapse = ''))
.cov.df$c1.f <- NULL
.cov.df$c2.f <- NULL
.cov.df$c3.f <- NULL
### HANDLE SPARSE AND EMPTY SERIES (drop if too sparse, fill 'downup' if pct NAs < max.cov.missing)
cov.df.wide <- .cov.df %>%
pivot_wider(names_from = cov_cat.f, values_from=c(cov_mean))
max.cov.missing <- 0.7
cov.cols.keep <- apply(cov.df.wide[,-1], 2, function(x){
( ( sum(!is.na(x)) / length(x)  ) > max.cov.missing ) & ## have enough non-missing values
( !is.na(x[1]) | !is.na(x[length(x)]) )    ## has either first or last row non-missing
})
## KEEP IF First or last row is not NA (for fill() below)
cov.cols.keep.names <- names(cov.df.wide[,-1])[cov.cols.keep]  ##exclude the 1st column 't'
cov.df.wide <- cov.df.wide %>% dplyr::select(all_of(c('t', cov.cols.keep.names)))
##
cov.cols.need.fill.bool <- apply(cov.df.wide[,-1], 2, function(x){
( sum(!is.na(x)) / length(x)  ) < 1
})
cov.cols.fill <- names(cov.df.wide)[ cov.cols.need.fill.bool ]
cov.df.wide <- cov.df.wide %>%
ungroup() %>%
tidyr::fill(all_of(cov.cols.fill), .direction = 'downup')
### FILL REMAINING NAs (after 'downup' fill) with zeros
cov.df.wide[is.na(cov.df.wide)] <- 0
##
bsts.df3 <- bsts.df %>% full_join(cov.df.wide, by='t')
bsts.df3$t <- NULL
write.csv(bsts.df3, file=bsts.df3.filepath, row.names = F, na = '')
}
rm(list=ls())
library(plyr)
library(dplyr)
library(tidyr)
library(tibble)
library(CausalImpact)
library(bsts)
library(did)
library(ggpubr)
library(cowplot)
library(coda)
library(Boom)
library(BoomSpikeSlab)
library(e1071)
library(forecast)  ## # library(sarima); library(qualV)
set.seed(987654321)  ## reproducibility
## Directories
dir_proj <- 'C:\\Users\\sdr8y\\OneDrive - University of Missouri\\Research\\BSTS'
dir_ext <- 'D:\\BSTS_external'
dir_plot <- file.path(dir_proj, 'plots')
dir_r <- file.path(dir_proj,'R')
##  file prefix for saving images, writing outputs, etc.
prefix <- 'bsts-illus_vignette_'
## Load simulation functions - Actor index vectorized simulation
source(file.path(dir_r,'single_intervention_sim_vec.R'))
## Setting up and adding state space components to state.space list
source(file.path(dir_r,'bsts_helper_functions.R'))
## BSTS vs. DiD comparison and sensitivity analysis
source(file.path(dir_r,'bsts_did_comparison_functions.R'))
## Knitr root dir - PDF rendering of notebook
knitr::opts_knit$set(root.dir = dir_proj)
## MAIN SIM SETTINGS
n <- 100  ## number of actors (i.e., number of time series)
npds <- 520
intpd <- round( npds * (5/6) )
effect.types <- c('quadratic') ##  c('constant','geometric','quadratic') ## c('quadratic')
bsts.niters <- list(sm.start = 50, sm.max = 100, lg.start = 500, lg.max = 1000)  ## lg=10k for full run
bsts.ctrl.cats <- 4
##
sim.config <- list(
##--------Simulation settings--------------
n = n,    ## Number of firms
npds = npds,  ## Number of periods
intpd = intpd, ## #intervention period = (5/6)'ths of the total periods
noise.level = 1.3, ## stdev of simulated noise terms
prior.sd.scenario = 'sd.low', ## BSTS Prior SD scenario (high vs. low uncertainty in priors
treat.rule = 'random',
treat.prob =  0.5,  ## ifelse(treat.rule=='random', 0.5, 1),
treat.threshold = 1, ## ifelse(treat.rule=='random', 1, 0.5),
seasonality = TRUE,
dgp.nseasons= 52,  ## ifelse(seasonality, dgp.nseasons, NA),
dgp.freq=  1, ##ifelse(seasonality, dgp.freq, NA),
rand.seed = 13579,
## Dynamic treatment effect  (quadratic polynomial)
w0 = 1.5,  ## constant
w1 = 0.13, ## linear
w2 = -.05 / sqrt(npds), ## quadratic
w2.shift = -round( sqrt(npds)*.7 ), ## quadratic shift rightward (make all of U-shape after intervention)
## focal parameters of outcome function (manipulated in sensitivity analysis)
b4 = 1.0,   ## seasonal component weight
b5 = 0.04,  ## yearly growth rate
b9 = 0,     ## autocorrelation
##
expect.mod.size = 1  # number of covariates included in BSTS model of counterfactual
)
## SIMULATION LIST HOLDER
simlist <- list()
## state space configuration used as label
key <- '1_level'
## SImulations list (for comparisons, gridsearches; use list length==1 for single model run)
simlist[[ key ]] <- sim.config
## Simulation ID
sim.id <- round(10*as.numeric(Sys.time()))
##-------------------------------------------------------
### CREATING ILLUSTRATION SIMULATION IF NONE EXISTS
data.filepath <- file.path(dir_proj, 'bsts_vignette_illustration_sim_dataframe.csv')
if ( ! file.exists(data.filepath) ) {
cat(sprintf('Illustration data file not found in project dir:\n %s.\nSimulating new illustration data set.',dir_proj))
## RUN SIMULATION -  GENERATE TIME SERIES
simlist <- runSimUpdateSimlist(simlist, effect.types = effect.types,
sim.id = sim.id, plot.show = F, plot.save = F )
# ## Save simulation for reuse with multiple BSTS models
# simcopy <- simlist[[key]]
## SAVE SIMULATED DATAFRAME TO FILE
simdf <- simlist[[key]]$sim$df
cols.to.front <- c('t','actor','y','x1','x2','x3','c1','c2','c3','b1','b2','b3','u','v','season.val')
cols.to.back <- c('effect.type','t.post.intpd','group','group.color','match_id','match_pd')
simdf <- simdf[, c(cols.to.front, cols.to.back)]
write.csv(simdf, file=data.filepath, row.names=F, na='')
}
##--------------------------------------------------------
### SUMMARIZE BSTS (single-observation) SERIES - WITH DIFFERENT COVARIATE PREDICTORS
bsts.df1.filepath <- file.path(dir_proj, 'bsts_vignette_illustration_bsts-1-NOctrl_df.csv')
bsts.df2.filepath <- file.path(dir_proj, 'bsts_vignette_illustration_bsts-2-ONEctrl_df.csv')
bsts.df3.filepath <- file.path(dir_proj, 'bsts_vignette_illustration_bsts-3-SYNTHctrl_df.csv')
f1exists <- file.exists(bsts.df1.filepath)
f2exists <- file.exists(bsts.df2.filepath)
f3exists <- file.exists(bsts.df3.filepath)
if ( file.exists(data.filepath) & any(!f1exists, !f2exists, !f3exists)) {
simdf <- read.csv(data.filepath, stringsAsFactors = F) ## don't auto convert chars to factor type
simdf <- as.tibble(simdf)
## TREATMENT
bsts.df <- simdf %>%
dplyr::filter(
! is.na(match_id),
group=='treatment'
) %>%
group_by(t) %>%
summarize(
y_treatment = mean(y, na.rm=T)
)
## NO UNTREATED CONTROL GROUP - ONLY COVARIATES
if (!f1exists) {
cov.df.wide <- simdf %>%
dplyr::filter(
! is.na(match_id),
group=='control'
) %>%
group_by(t) %>%
dplyr::summarize(
c1_mean = mean(c1, na.rm=T),
c2_mean = mean(c2, na.rm=T),
c3_mean = mean(c3, na.rm=T),
c1_sd = sd(c1, na.rm=T),
c2_sd = sd(c2, na.rm=T),
c3_sd = sd(c3, na.rm=T),
c1_skew = ifelse(length(c1)<=1, NA, skewness(c1, na.rm = T, type = 2)),
c2_skew = ifelse(length(c2)<=1, NA, skewness(c2, na.rm = T, type = 2)),
c3_skew = ifelse(length(c3)<=1, NA, skewness(c3, na.rm = T, type = 2))#,
) #%>% pivot_wider(names_from, values_from)
bsts.df1 <- bsts.df %>% full_join(cov.df.wide, by='t')
bsts.df1$t <- NULL
write.csv(bsts.df1, file=bsts.df1.filepath, row.names = F, na = '')
}
## 1 UNTREATED CONTROL GROUP  +  COVARIATES
if (!f2exists) {
cov.df.wide <- simdf %>%
dplyr::filter(
! is.na(match_id),
group=='control'
) %>%
group_by(t) %>%
dplyr::summarize(
y_control = mean(y, na.rm=T),
c1_mean = mean(c1, na.rm=T),
c2_mean = mean(c2, na.rm=T),
c3_mean = mean(c3, na.rm=T),
c1_sd = sd(c1, na.rm=T),
c2_sd = sd(c2, na.rm=T),
c3_sd = sd(c3, na.rm=T),
c1_skew = ifelse(length(c1)<=1, NA, skewness(c1, na.rm = T, type = 2)),
c2_skew = ifelse(length(c2)<=1, NA, skewness(c2, na.rm = T, type = 2)),
c3_skew = ifelse(length(c3)<=1, NA, skewness(c3, na.rm = T, type = 2))#,
) #%>% pivot_wider(names_from, values_from)
bsts.df2 <- bsts.df %>% full_join(cov.df.wide, by='t')
bsts.df2$t <- NULL
write.csv(bsts.df2, file=bsts.df2.filepath, row.names = F, na = '')
}
## SYNETHIC CONTRL GROUPS FROM COVARIATES CATEGORIES MEAN OUTCOME SERIES
if (!f3exists) {
## c1 covariates categories
c1cats <- cut(simdf$c1, bsts.ctrl.cats)
simdf$c1.f <- LETTERS[as.integer(as.factor(c1cats))]
## c2  covariate categories
c2cats <- cut(simdf$c2, bsts.ctrl.cats)
simdf$c2.f <- LETTERS[as.integer(as.factor(c2cats))]
##
c3cats <- cut(simdf$c3, bsts.ctrl.cats)
simdf$c3.f <- LETTERS[as.integer(as.factor(c3cats))]
### SYNTHETIC CONTROL GROUPS
.cov.df <- simdf %>%
dplyr::filter(
! is.na(match_id),
group=='control'
) %>%
group_by(t, c3.f, c2.f, c1.f) %>%
dplyr::summarize(
cov_mean = mean(y, na.rm=T)
)
.cov.df$cov_cat.f <- apply(.cov.df[,c('c1.f','c2.f','c3.f')], 1, function(x)paste(x,collapse = ''))
.cov.df$c1.f <- NULL
.cov.df$c2.f <- NULL
.cov.df$c3.f <- NULL
### HANDLE SPARSE AND EMPTY SERIES (drop if too sparse, fill 'downup' if pct NAs < max.cov.missing)
cov.df.wide <- .cov.df %>%
pivot_wider(names_from = cov_cat.f, values_from=c(cov_mean))
max.cov.missing <- 0.7
cov.cols.keep <- apply(cov.df.wide[,-1], 2, function(x){
( ( sum(!is.na(x)) / length(x)  ) > max.cov.missing ) & ## have enough non-missing values
( !is.na(x[1]) | !is.na(x[length(x)]) )    ## has either first or last row non-missing
})
## KEEP IF First or last row is not NA (for fill() below)
cov.cols.keep.names <- names(cov.df.wide[,-1])[cov.cols.keep]  ##exclude the 1st column 't'
cov.df.wide <- cov.df.wide %>% dplyr::select(all_of(c('t', cov.cols.keep.names)))
##
cov.cols.need.fill.bool <- apply(cov.df.wide[,-1], 2, function(x){
( sum(!is.na(x)) / length(x)  ) < 1
})
cov.cols.fill <- names(cov.df.wide)[ cov.cols.need.fill.bool ]
cov.df.wide <- cov.df.wide %>%
ungroup() %>%
tidyr::fill(all_of(cov.cols.fill), .direction = 'downup')
### FILL REMAINING NAs (after 'downup' fill) with zeros
cov.df.wide[is.na(cov.df.wide)] <- 0
##
bsts.df3 <- bsts.df %>% full_join(cov.df.wide, by='t')
bsts.df3$t <- NULL
write.csv(bsts.df3, file=bsts.df3.filepath, row.names = F, na = '')
}
}
## Write to file to load in future runs
###***********
# line for calling data?    LOAD SIMULATED TABLE?   OR CCONMA DATA ?
## y.pre
##
df <- read.csv(bsts.df1.filepath, stringsAsFactors = F) ## don't auto convert chars to factor type
df <- as.tibble(df)
print(names(df))
print(df)
plot(df$y_treatment, main='Simulated Outcome Series (Y)')
plot(df$y_treatment, main='Simulated Time Series (Y)',
ylab='Y',xlab='Time'); abline(v=round(nrow(df)*5/6))
ylab='Y',xlab='Time'); abline(v=round(nrow(df)*5/6),lty='2)
plot(df$y_treatment, main='Simulated Time Series (Y)',
ylab='Y',xlab='Time'); abline(v=round(nrow(df)*5/6),lty=2)
plot(df$y_treatment, main='Simulated Time Series (Y)',
ylab='Y',xlab='Time'); abline(v=round(nrow(df)*5/6),lty=2,col='red')
plot(df$y_treatment, main='Simulated Time Series (Y)',
ylab='Y',xlab='Time'); abline(v=round(nrow(df)*5/6),lty=2,col='gray')
plot(df$y_treatment, main='Simulated Time Series (Y)',
ylab='Y',xlab='Time'); abline(v=round(nrow(df)*5/6),lty=2,col='darkgray')
plot(df$y_treatment, main='Simulated Time Series (Y)',
ylab='Y',xlab='Time'); abline(v=round(nrow(df)*5/6),lty=2,lwd=2,col='darkgray')
plot(df$y_treatment, main='Simulated Time Series (Y)',
ylab='Y',xlab='Time'); abline(v=round(nrow(df)*5/6),lty=2,lwd=2)
legend('topright',legend = c('observed','intervention pd.'), pch=c(1,NA),lty=c(NA,2))
plot(df$y_treatment, main='Simulated Time Series (Y)', ylab='Y',xlab='Time')
abline(v=round(nrow(df)*5/6),lty=2)
legend('topright',legend = c('observed','intervention pd.'), pch=c(1,NA),lty=c(NA,2))
legend('topleft',legend = c('observed','intervention pd.'), pch=c(1,NA),lty=c(NA,2))
plot(df$y_treatment, main='Simulated Time Series (Y)', ylab='Y',xlab='Time')
abline(v=round(nrow(df)*5/6),lty=2)
legend('topleft',legend = c('observed','intervention pd.'), pch=c(1,NA),lty=c(NA,2))
legend('topleft',legend=c('observed','intervention'),pch=c(1,NA),lty=c(NA,2))
plot(df$y_treatment, main='Simulated Time Series (Y)', ylab='Y',xlab='Time')
abline(v=round(nrow(df)*5/6),lty=2)
legend('topleft',legend=c('observed','intervention'),pch=c(1,NA),lty=c(NA,2))
plot(df$y_treatment, main='Simulated Time Series (Y)', ylab='Y',xlab='Time')
abline(v=round(nrow(df)*5/6),lty=2)
legend('topleft',legend=c('observed','intervention'),pch=c(1,NA),lty=c(NA,2))
plot(df$y_treatment, main='Simulated Time Series (Y)', ylab='Y',xlab='Time')
abline(v=round(nrow(df)*5/6),lty=2)
legend('topleft',legend=c('observed','intervention'),pch=c(1,NA),lty=c(NA,2))
plot(df$y_treatment, main='Simulated Time Series (Y)',type='l', ylab='Y',xlab='Time')
abline(v=round(nrow(df)*5/6),lty=2)
legend('topleft',legend=c('observed','intervention'),pch=c(1,NA),lty=c(NA,2))
plot(df$y_treatment, main='Simulated Time Series (Y)',type='o', ylab='Y',xlab='Time')
plot(df$y_treatment, main='Simulated Time Series (Y)',type='', ylab='Y',xlab='Time')
plot(df$y_treatment, main='Simulated Time Series (Y)',ylab='Y',xlab='Time')
## Initiate empty state space configuration list
st.sp <- list()
## Initiate empty state space configuration list
st.sp <- list()
## Add local level to trend component of state space
st.sp <- AddLocalLevel(st.sp, y.pre)
plot(df$y_treatment, main='Simulated Time Series (Y)',ylab='Y',xlab='Time')
abline(v=round(nrow(df)*5/6),lty=2)
legend('topleft',legend=c('observed','intervention'),pch=c(1,NA),lty=c(NA,2))
npds <- nrow(df)
intpd <- round(npds * 5/6)
y.pre <- df$y_treatment
pre.int.ids <- (1:npds) < intpd
pre.int.ids
plyr::count(y.pre)
y.pre[pre.int.ids] <- NA
plyr::count(y.pre)
y.pre <- df$y_treatment
pre.int.ids <- (1:npds) < intpd
y.pre[pre.int.ids] <- NA
y.pre
plyr::count(is.na(y.pre))
npds <- nrow(df)
intpd <- round(npds * 5/6)
##
plot(df$y_treatment, main='Simulated Time Series (Y)',ylab='Y',xlab='Time')
abline(v=intpd, lty=2)
legend('topleft',legend=c('observed','intervention'), pch=c(1,NA),lty=c(NA,2))
intpd
plot(df$y_treatment, main='Simulated Time Series (Y)',ylab='Y',xlab='Time')
abline(v=intpd, lty=2)
legend('topleft',legend=c('observed','intervention'), pch=c(1,NA),lty=c(NA,2))
y.pre <- df$y_treatment
pre.int.ids <- (1:npds) < intpd
y.pre[pre.int.ids] <- NA
y.pre
## Initiate empty state space configuration list
st.sp <- list()
## Add local level to trend component of state space
st.sp <- AddLocalLevel(st.sp, y.pre)
## Add trigonometric seasonality to state space
st.sp <- AddTrig(st.sp, y.pre, period = 12, frequencies = 1)
## Set BSTS MCMC iterations
bsts.niter <- 1000
st.sp
df1
## load BSTS library
library(bsts)
library(CausalImpact)
library(tibble)
###***********
# line for calling data?    LOAD SIMULATED TABLE?   OR CCONMA DATA ?
## y.pre
##
df1 <- read.csv(bsts.df1.filepath, stringsAsFactors = F) ## don't auto convert chars to factor type
df1 <- as.tibble(df1)
print(df1)
npds <- nrow(df1)
intpd <- round(npds * 5/6)
##
plot(df1$y_treatment, main='Simulated Time Series (Y)',ylab='Y',xlab='Time')
abline(v=intpd, lty=2)
legend('topleft',legend=c('observed','intervention'), pch=c(1,NA),lty=c(NA,2))
## Fit BSTS model: formula “y.pre ~ .” indicates inclusion of regression
## component (all covariates in df1[,-1] dataframe)
bsts.fit <- bsts(y.pre ~ . ,
state.specification = st.sp,
data = df1[ ,-1],  ## -1 excludes the outcome in 1st column
niter = bsts.niter)
df1[ ,-1]
y.pre <- df$y_treatment
pre.int.ids <- (1:npds) < intpd
y.pre[pre.int.ids] <- NA
## Initiate empty state space configuration list
st.sp <- list()
## Add local level to trend component of state space
st.sp <- AddLocalLevel(st.sp, y.pre)
## Add trigonometric seasonality to state space
st.sp <- AddTrig(st.sp, y.pre, period = 12, frequencies = 1)
## Set BSTS MCMC iterations
bsts.niter <- 1000
## Fit BSTS model: formula “y.pre ~ .” indicates inclusion of regression
## component (all covariates in df1[,-1] dataframe)
bsts.fit <- bsts(y.pre ~ . ,
state.specification = st.sp,
data = df1[ ,-1],  ## -1 excludes the outcome in 1st column
niter = bsts.niter)
y.pre
st.sp
?rnorm
sqrt(.15)
1 * .1
.1^2
