# ## Density plot
# ggplot(simdf,aes(x=y, colour=effect.type)) + geom_density(alpha=0.1, size=1.4)
##====================
## BSTS Timseries Setup
##--------------------
## Aggregate into timeseries dataframe
tsdf <- simdf %>%
dplyr::filter( ! is.na(match_id)) %>%
group_by(t, t.post.intpd, effect.type, match_pd, gname, group, group.color) %>%
dplyr::summarize(
n_in_pd = n(),
actors = paste(unique(actor), collapse = '|'),
y_outcome = mean(y, na.rm=T),
y_sum = sum(y, na.rm=T),
y_sd = sd(y, na.rm=T),
y_min = min(y, na.rm=T),
y_max = max(y, na.rm=T),
y_skew = skewness(y, na.rm = T, type = 2), ## moment-based distribution
y_kurt = kurtosis(y, na.rm = T, type = 2), ## moment-based distribution
# ##
# x1_sum = sum(x1, na.rm=T),
# x2_sum = sum(x2, na.rm=T),
# x3_sum = sum(x3, na.rm=T),
# ##
# c1_sum = sum(c1, na.rm=T),
# c2_sum = sum(c2, na.rm=T),
# c3_sum = sum(c3, na.rm=T),
# #
# b1_sum = sum(b1, na.rm=T),
# b2_sum = sum(b2, na.rm=T),
# b3_sum = sum(b3, na.rm=T),
# #
# u_sum = sum(u, na.rm=T),
# v_sum = sum(v, na.rm=T),
##
x1_mean = mean(x1, na.rm=T),
x2_mean = mean(x2, na.rm=T),
x3_mean = mean(x3, na.rm=T),
##
c1_mean = mean(c1, na.rm=T),
c2_mean = mean(c2, na.rm=T),
c3_mean = mean(c3, na.rm=T),
#
c1_sd = sd(c1, na.rm=T),
c2_sd = sd(c2, na.rm=T),
c3_sd = sd(c3, na.rm=T),
##
c1_skew = skewness(c1, na.rm=T, type = 2),
c2_skew = skewness(c2, na.rm=T, type = 2),
c3_skew = skewness(c3, na.rm=T, type = 2),
#
c1_kurt = skewness(c1, na.rm=T, type = 2),
c2_kurt = skewness(c2, na.rm=T, type = 2),
c3_kurt = skewness(c3, na.rm=T, type = 2),
#
b1_mean = mean(b1, na.rm=T),
b2_mean = mean(b2, na.rm=T),
b3_mean = mean(b3, na.rm=T),
#
u_mean = mean(u, na.rm=T),
v_mean = mean(v, na.rm=T)
)
tsdf$.id <- 1:nrow(tsdf)
## MAKE WIDE TIMESERIES FOR treatment,control groups in n periods
val.cols <- c('y_outcome','y_sum','y_min','y_max','y_sd',
'y_skew','y_kurt',
'x1_mean','x2_mean','x3_mean',
'c1_mean','c2_mean','c3_mean',
'c1_sd','c2_sd','c3_sd',
'c1_skew','c2_skew','c3_skew',
'c1_kurt','c2_kurt','c3_kurt',
'b1_mean','b2_mean','b3_mean',
'u_mean','v_mean')
ts <- unique(tsdf$t)
groups <- unique(tsdf$group)
## init timeseries dataframe - wide
tsdfw <- data.frame(t=ts,  stringsAsFactors = F)
for (jj in 1:length(groups)) {
id.j <- which( tsdf$group == groups[ jj ] )
for (kk in 1:length(val.cols)) {
df.col <- data.frame( tsdf[ id.j , val.cols[ kk ] ] )
names(df.col) <- sprintf('%s_%s',groups[ jj ],val.cols[ kk ])
tsdfw <- cbind(tsdfw,  df.col)
}
}
# Set up pre- and post-treatment period
# pre.period <- as.Date(c("2013-01-01","2016-01-25"))
pre.period <- c(1, intpd-1)
# post.period <- as.Date(c("2016-01-26","2018-01-01"))
post.period <- c(intpd, npds)
# # BSTS causal effect analysis using CausalImpact package
# # CausalImpact option:
# # niter: Number of MCMC samples to draw. More samples lead to more accurate inferences. Defaults to 1000.
# # standardize.data: Whether to standardize all columns of the data before fitting the model (i.e., setting Bayes priors), Defaults to TRUE.
# # prior.level.sd: Prior standard deviation of the Gaussian random walk of the local level. Defaults to 0.01.
# # nseasons: Period of the seasonal components. Default to 1.
# # dynamic.regression: Whether to include time-varying regression coefficients. Defaults to FALSE.
# impact_amount <- CausalImpact(amount.impact,pre.period,post.period,alpha=0.1, model.args = list(niter = 5000))
# summary(impact_amount)
# plot(impact_amount)
dat <- tsdfw[,c('treatment_y_outcome','control_y_outcome','control_y_sd',#'control_y_sum', 'control_y_min','control_y_max',
'control_y_max','control_y_skew', 'control_y_kurt',
'control_c1_mean','control_c2_mean','control_c3_mean',
'control_c1_sd','control_c2_sd','control_c3_sd',
# 'control_c1_skew','control_c2_skew',
'control_c3_skew',
# 'control_c1_kurt','control_c2_kurt',
'control_c3_kurt'#,
# 'treatment_c1_mean','treatment_c2_mean','treatment_c3_mean',
# 'control_u_mean','control_v_mean'
)]
## Train on y pre-treatment but NA's post-treatment
y.pre.treat.NAs.post.treat <- c(dat$treatment_y_outcome[1:(intpd-1)], rep(NA,npds-intpd+1))
## Then use the post-treatment response for causal impact estimation
post.period.response <- dat$treatment_y_outcome[intpd:npds]
## Covariates (predictors) - Matrix for "formula = y ~ predictors" argument
predictors <- dat[, ! names(dat) %in% 'treatment_y_outcome'] ## remove response; convert to matrix
# ## Covariates (predictors) - Dataframe for "data" argument
# predictors <- as.matrix(predictors)
## ADD temporal trend to covariates
predictors$covar_temp_trend <- (1:npds) + rnorm(npds, 0, noise.level)   ## * simlist$`0.rand.base`$b5
##----------------------------
## State Space Configuration
##----------------------------
## LOOP OVER BSTS STATE SPECIFICATIONS FOR THE SAME SIMULATION RUN
for (h in 1:length(bsts.state.specs))
{
simlist[[key]]$compare$bsts[[effect.type]][[ h ]] <- list()
## h'th BSTS state space configuration (state component list)
state.conf <- bsts.state.specs[[ h ]]
## names of
state.comps <- unname(sapply(state.conf, function(x)x$name, simplify = T))
## Loop over state space components
nss <- length(state.conf)
## State Space Config list
st.sp <- list()
if (nss > 0) {
for (jj in 1:nss) {
state.conf.item <- state.conf[[ jj ]]
if (class(state.conf.item)=='list') {
if(state.conf.item$name=='AddSharedLocalLevel') {
state.conf$coefficient.prior <- SpikeSlabPrior(
x = predictors,
y = dat$treatment_y_mean, ##**NOTE** USING ALL Y VALS (not just y.pre.treat.NAs.post.treat)
expected.r2 = .5, ## [.5]
prior.df = .01, ##[.01]
expected.model.size = 2, ## [1]
prior.information.weight = .01, ## [.01]
diagonal.shrinkage = 0.5,  ## [.5] setting=0 --> Zellner's G-prior
# optional.coefficient.estimate = NULL,
max.flips = -1,  ## <= 0 means all indicators will be sampled
# prior.inclusion.probabilities = NULL,
sigma.upper.limit = Inf
)
# }  else if (state.conf.item$name=='AddAutoAr') {
#   .lags <- 3
#   state.conf$prior <- SpikeSlabArPrior(
#     lags = .lags,
#     prior.inclusion.probabilities = GeometricSequence(length= .lags, initial.value= 0.9, discount.factor= 0.3),
#     prior.mean = rep(0, .lags),
#     prior.sd = GeometricSequence(length = .lags, initial.value=0.5, discount.factor=0.1),
#     sdy=.5,
#     prior.df = 1,
#     expected.r2 = .5,
#     sigma.upper.limit = Inf,
#     truncate = TRUE
#   )
}
## [[ IF NOT AddSharedLocalLevel(), NOT INCLUDING SPIKESLABPRIOR ]]
st.sp <- updateStateSpaceAddComponentFromConfList(st.sp,
y.pre.treat.NAs.post.treat,
state.conf.item)
cat(sprintf('add to state.space: %s\n',state.conf.item$name))
}
}
} else {
## Default in CausalImpact package
st.sp <- AddLocalLevel(st.sp, y.pre.treat.NAs.post.treat)
}
# print(st.sp)
cat(sprintf('\nRunning BSTS model estimation for state.conf h=%s\n',h))
## BSTS model
bsts.model <- tryCatch(expr = {
bsts(y.pre.treat.NAs.post.treat ~ . ,
state.specification = st.sp,
data = predictors,
expected.model.size = expect.mod.size,
niter = bsts.niter)
},
error=function(e) {
message(sprintf('bsts() error: %s', as.character(e)))
# message(cond)
# # Choose a return value in case of error
# return(NA)
},
warning=function(w) {
message(sprintf('bsts() warning: %s', as.character(w)))
# message(paste("URL caused a warning:", url))
# return(NA)
},
finally={
##PASS
})
# bsts.model <- bsts(y.pre.treat.NAs.post.treat ~ . ,
#                    state.specification = st.sp,
#                    data = predictors,
#                    niter = bsts.niter)
if ( class(bsts.model) != 'bsts' ) {
next
}
##
plot(bsts.model, main=sprintf('BSTS Plot: %s: %s',effect.type,paste(state.comps,collapse = ' + ')))
PlotBstsComponents(bsts.model) ## , main=sprintf('BSTS Components: %s: %s',effect.type,paste(state.comps,collapse = ' + '))
# PlotBstsState(bsts.model, main=sprintf('BSTS State: %s: %s',effect.type,paste(state.comps,collapse = ' + ')))
# PlotBstsResiduals(bsts.model, main=sprintf('BSTS Residuals: %s: %s',effect.type,paste(state.comps,collapse = ' + ')))
# PlotBstsPredictionErrors(bsts.model, main=sprintf('BSTS Pred.Err: %s: %s',effect.type,paste(state.comps,collapse = ' + ')))
# PlotBstsForecastDistribution(bsts.model, main=sprintf('BSTS Forecast Dist: %s: %s',effect.type,paste(state.comps,collapse = ' + ')))
PlotBstsSize(bsts.model, main=sprintf('BSTS Size: %s: %s',effect.type,paste(state.comps,collapse = ' + ')))
##
# ## BSTS model for Dynamic Regression
# bsts.model <- bsts(y.pre.treat.NAs.post.treat,
#                    state.specification = st.sp,
#                    niter = 5000)
## Use BSTS prediction of counterfactual to estimate CausalImpact
impact_amount <- CausalImpact(bsts.model=bsts.model,
post.period.response = post.period.response,
alpha=0.05, model.args = list(niter = bsts.niter))
## POSTERIOR PREDICTIVE CHECKS
ppcheck.filename <- file.path(save.img.dir,
sprintf('%s_bsts_post_pred_checks_n%s_pd%s_ss%s_niter%s_%s_%s_%s.png',
prefix,n,npds,h,bsts.niter,key.strip,effect.type,sim.id))
postPredChecks(impact_amount, filename=ppcheck.filename)
# ##
# summary(impact_amount)
# summary(impact_amount$model$bsts.model)
# plot(impact_amount)
# summary(impact_amount)
# png(filename=sprintf('single_intervention_BSTS_CausalImpact_plot_%s_%s_%s.png',
#                         key,effect.type,sim.id))
p.bsts.impact.all <- plot(impact_amount, c('original','pointwise','cumulative')) # pointwise','cumulative
ggsave(filename = file.path(save.img.dir,
sprintf('%s_bsts_CausalImpact_plot_n%s_pd%s_ss%s_niter%s_%s_%s_%s.png',
prefix,n,npds,h,bsts.niter,key.strip,effect.type,sim.id))
)
# dev.off()
##-------------------
## OVERALL CONFIDENCE INTERVALS AND PVALUES
## OVERALL CAUSAL P-VALUE
pval.bsts.general <- impact_amount$summary$p[2]
# pval.did.general <- ccattgt
ci.bsts.general <- c(impact_amount$summary$AbsEffect.lower[1], impact_amount$summary$AbsEffect.upper[1])
## MUST USE GROUP AGGREGATION TO GET critical.val.egt
## (we only have one group [i.e., one treatment time])
ci.did.general <- c(agg.group$overall.att - (agg.group$overall.se * agg.group$crit.val.egt),
agg.group$overall.att + (agg.group$overall.se * agg.group$crit.val.egt))
##-------------------
## DID
did.res <- tidy(agg.es)
## BSTS
bsts.res <- impact_amount$series
# .nidx <- which(names(bsts.res) %in% c('point.effect','point.effect.lower','point.effect.upper'))
bsts.res <- bsts.res[ , which(names(bsts.res) %in% c('point.effect','point.effect.lower','point.effect.upper')) ]
names(bsts.res) <- c('bsts.point.effect','bsts.point.effect.lower','bsts.point.effect.upper')
# plot(did.res)
# ## AVERAGE TREATMENT EFFECT USED IN SIMULATION
# simdf
tr.actors <- unique(simdf$actor[which(simdf$group=='treatment')])
co.actors <- unique(simdf$actor[which(simdf$group=='control')])
b3diff <- data.frame(
treat=simdf %>%
dplyr::filter(group=='treatment' & actor==tr.actors[1]) %>%
ungroup() %>%
dplyr::mutate(treat=b3) %>%
dplyr::select(treat),  ##ungroup() %>%
ctrl=simdf %>%
dplyr::filter(group=='control' & actor==co.actors[1]) %>%
ungroup() %>%
dplyr::mutate(ctrl=b3) %>%
dplyr::select(ctrl),
diff=NA
)
b3diff$diff <- b3diff$treat - b3diff$ctrl
##
att.b3 <- mean(b3diff$diff[intpd:npds])
att.did <- agg.es$overall.att
att.bsts <- impact_amount$summary$AbsEffect[1]
# simdf %>%
#   filter(group=='control' & actor==tr.actors[1]) %>%
#   dplyr::mutate(b3.diff=b3.treat-b3.ctrl) %>%
#   dplyr::select(b3.diff)
## time df add empty row at top of event time columns
time.df <- did.res[ ,c('term','event.time')]
# time.df <- rbind(time.df,time.df[nrow(time.df),])
# time.df[nrow(time.df),] <- NA
## add placeholder row at top and set to NAs
time.df <- rbind(time.df[1,], time.df)
time.df[1,] <- NA
time.df$event.time[1] <-  min(time.df$event.time, na.rm = T) - 1
# ## *** FIX MISALIGNED INTERVENTION TIME INDEX BETWEEN DID & BSTS
# ##     - add empty row on top of DiD (which indexed treatment at t=0) so now treatment is t=1
# ##       which matches BSTS (treatment at t=1)
did.res.adj <- did.res[ ,c('estimate','point.conf.low','point.conf.high')]
names(did.res.adj) <- c('did.estimate','did.point.conf.low','did.point.conf.high')
.na.row <- did.res.adj[1, ]
.na.row[1:nrow(.na.row), ] <- NA
did.res.adj <- rbind(.na.row, did.res.adj)
# did.res <- rbind(did.res[-1, ], .na.row, .na.row)
# ## ##    - remove first row to pull index t=0 up to t=1
# did.res <- did.res[-1, ]
## Results comparison table
res.tbl <- cbind(
time.df,
bsts.res,
did.res.adj,
b3.treat=b3diff$treat,
b3.ctrl=b3diff$ctrl,
b3.att=b3diff$diff
)
## ROUND RESULTS TABLE (round numeric columns)
# res.tbl <- res.tbl[ ! is.na(res.tbl$estimate), ]
num.cols <- names(res.tbl)[ ! names(res.tbl) %in% c('term','event.time') ]
# res.tbl[ , num.cols] <- round( as.numeric(res.tbl[ , num.cols]), 4)  ## ** TODO: Find out why this as.numeric stopped working on 'list'
res.tbl[ , num.cols] <- round( res.tbl[ , num.cols], 4)
# for (i in 1:length(num.cols)) {
#   res.tbl[ , num.cols[i] ] <- round( as.numeric( res.tbl[ , num.cols[i] ] ), 4)
# }
# ## MOVE ID COLUMNS TO FRONT
# .col.idx <- which(names(res.tbl) %in% c('term','event.time'))
# res.tbl4 <- cbind(res.tbl[, .col.idx],  res.tbl[, -.col.idx] )
# # View(res.tbl4)
##PLOT INCLUSION PROBABILITIES
png(filename = file.path(save.img.dir,
sprintf('%s_BSTS_inclusion_probs_n%s_pd%s_ss%s_niter%s_%s_%s_%s.png',
prefix,n,npds,h,bsts.niter,key.strip,effect.type,sim.id)))
plot(impact_amount$model$bsts.model,'coefficients', main=sprintf('%s %s', key,effect.type))
dev.off()
## PLOT DYNAMIC EFFECTS COMPARISON - DID vs. BSTS vs. DGP
dyndf <- rbind(
data.frame(event.time=res.tbl$event.time, series='1.BSTS', ATT=res.tbl$bsts.point.effect),
data.frame(event.time=res.tbl$event.time, series='2.DiD', ATT=res.tbl$did.estimate),
data.frame(event.time=res.tbl$event.time, series='3.DGP', ATT=res.tbl$b3.att)
)
hue2 <- hue_pal()(2)
p.err1 <- ggplot(dyndf, aes(x=event.time, y=ATT, color=series,fill=series,linetype=series,shape=series)) +
geom_line(na.rm=T, size=.9) + geom_point(na.rm=T, size=2) +
theme_bw() + xlab('Event Time') +
ggtitle(sprintf('Comparison of Mean ATT Estimates (DGP = %.3f):  BSTS = %.3f; DiD = %.3f',att.b3,att.bsts,att.did)) +
geom_vline(xintercept=-0.5, linetype='dotted')+
geom_hline(yintercept = 0) +
scale_color_manual(values=c(hue2[1],hue2[2],'black')) +
scale_shape_manual(values=c(17,19,NA)) +
scale_linetype_manual(values=c(2,3,1))  +
theme(legend.position='top')
# png(filename = file.path(save.img.dir,
#                          sprintf('%s_BSTS_dynamic_treatment_effect_comparison_n%s_pd%s_ss%s_%s_%s_%s.png',
#                                  prefix,n,npds,h,key.strip,effect.type,sim.id)))
# matplot.main <- sprintf('%s: DGP = %.3f; DiD = %.3f;  BSTS = %.3f',
#                             key.strip, mean(b3diff$diff[intpd:nrow(b3diff)]), agg.es$overall.att, impact_amount$summary$AbsEffect[1])
# matplot(x = res.tbl$event.time, y=res.tbl[,c('point.effect','estimate','b3.att')],,
#         type='o',lty=c(2,3,1),pch=c(1,20,NA),lwd=c(1,1,1),
#         col=c('red','blue','black'),
#         main=matplot.main, ylab='ATT',xlab='t')
# legend('topright',legend=c('BSTS','DiD','DGP'),col=c('red','blue','black'),lty=c(2,3,1),pch=c(1,20,NA),lwd=c(1,1,1))
# dev.off()
## PLOT ATT ESTIMATE ERROR DISTRIBUTIONS COMPARISON
errdf <- rbind(
data.frame(method='BSTS', error=(res.tbl$bsts.point.effect[1:(intpd-1)] - res.tbl$b3.att[1:(intpd-1)])),
data.frame(method='DiD', error=(res.tbl$did.estimate[1:(intpd-1)] - res.tbl$b3.att[1:(intpd-1)]))
)
vline.dat <- errdf %>% dplyr::group_by(method) %>% dplyr::summarize(grp.mean=mean(error,na.rm=T))
p.err2 <- ggplot(errdf, aes(x=error, colour=method,fill=method)) +
geom_vline(xintercept=0)+
geom_density(alpha=0.3, na.rm=T) +
geom_vline(data=vline.dat, aes(xintercept=grp.mean, color=method), linetype="dashed",size=1.2) +
# geom_histogram(alpha=0.2, position = 'identity', na.rm = T) +
ggtitle(sprintf('Pre-Intervention Pointwise Error:\n Mean: BSTS = %.3f; DiD = %.3f\n SD:   BSTS = %.3f; DiD = %.3f',
mean(errdf$error[errdf$method=='BSTS'],na.rm=T),
mean(errdf$error[errdf$method=='DiD'],na.rm=T),
sd(errdf$error[errdf$method=='BSTS'],na.rm=T),
sd(errdf$error[errdf$method=='DiD'],na.rm=T)  )
) + theme_bw() + xlab('Residuals')
# ggsave(filename = file.path(save.img.dir,
#                             sprintf('%s_ATT_est_pointwise_error_distributions_n%s_pd%s_ss%s_%s_%s_%s.png',
#                                     prefix,n,npds,h,key.strip,effect.type,sim.id)))
## PLOT ATT ESTIMATE ERROR DISTRIBUTIONS COMPARISON
errdf <- rbind(
data.frame(method='BSTS', error=(res.tbl$bsts.point.effect[intpd:npds] - res.tbl$b3.att[intpd:npds])),
data.frame(method='DiD', error=(res.tbl$did.estimate[intpd:npds] - res.tbl$b3.att[intpd:npds]))
)
vline.dat <- errdf %>% dplyr::group_by(method) %>% dplyr::summarize(grp.mean=mean(error,na.rm=T))
p.err3 <- ggplot(errdf, aes(x=error, colour=method,fill=method)) +
geom_vline(xintercept=0)+
geom_density(alpha=0.3, na.rm=T) +
geom_vline(data=vline.dat, aes(xintercept=grp.mean, color=method), linetype="dashed",size=1.2) +
# geom_histogram(alpha=0.2, position = 'identity', na.rm = T) +
ggtitle(sprintf('Post-Intervention ATT Bias:\n Mean: BSTS = %.3f; DiD = %.3f\n SD:   BSTS = %.3f; DiD = %.3f',
mean(errdf$error[errdf$method=='BSTS'],na.rm=T),
mean(errdf$error[errdf$method=='DiD'],na.rm=T),
sd(errdf$error[errdf$method=='BSTS'],na.rm=T),
sd(errdf$error[errdf$method=='DiD'],na.rm=T))
) + theme_bw() + xlab('Residuals (Distance of Pointwise ATT Estimate from DGP)')
# ggsave(filename = file.path(save.img.dir,
#                             sprintf('%s_ATT_est_pointwise_error_distributions_n%s_pd%s_ss%s_%s_%s_%s.png',
#                                     prefix,n,npds,h,key.strip,effect.type,sim.id)))
# ## SIMULATED DATA GROUPS FOR EFFECT.TYPE=k
# df.group.series <-  ddply(sim$df %>% dplyr::filter(effect.type==effect.type), .(t,effect.type,group), summarize,
#                           min=min(y, na.rm=T),
#                           cl=quantile(y, probs=0.025, na.rm=T),
#                           med=median(y, na.rm=T),
#                           cu=quantile(y, probs=0.975, na.rm=T),
#                           max=max(y, na.rm=T))
# ## ## sim$df.summary %>% dplyr::filter(effect.type==effect.type)
# p.group.series <- ggplot( df.group.series, aes(x=as.numeric(t), y=med, color=group)) +
#   geom_ribbon(aes(ymin=cl,ymax=cu,fill=group), alpha=.15, size=.01, lty=1) +
#   geom_line(size=1.2) +
#   geom_point(aes(x=as.numeric(t), y=min),pch=1,alpha=.3) + geom_point(aes(x=as.numeric(t),y=max),pch=1,alpha=.3) +
#   geom_hline(yintercept=0) + geom_vline(xintercept=intpd, lty=2) +
#   ylab('Y') +
#   # facet_grid( effect.type ~ . ) +
#   theme_bw() + theme(legend.position='top') # + ggtitle(plot.main)
## ## ALL SIMULATED ACTOR TIMESERIRES
# df.ind.series <- simlist[[key]]$sim$df.plot %>% dplyr::filter(effect.type == effect.type)
df.plot <- simlist[[key]]$sim$df
df.ind.series <- df.plot[which(df.plot$effect.type == effect.type),]
# df.ind.series$t0 <-df.ind.series$t - df.ind.series$t.post.intpd
p.ind.series <- ggplot(data=df.ind.series, mapping=aes(x=t,y=y, color=group, group=actor)) +
geom_line(size=1.05, alpha=0.2) +
# geom_point(, color=rgb(0.2, 0.2, 0.8, 0.1))+
geom_hline(yintercept=0)  + # facet_grid( effect.type ~ . ) +
geom_vline(xintercept= (intpd - 0.5), linetype='dotted')+
scale_color_manual(values = c(rgb(.2,.2,.8,.3), rgb(.8,.2,.2,.3))) +
theme_bw() + theme(legend.position='bottom') + ggtitle('Simulated Time Series') #+
# guides(color=guide_legend(nrow=3,byrow=TRUE)) #+
## BSTS
# ## GROUP SUMMARY TIME SERIES
bsts.wide <- as.data.frame(impact_amount$series)
bsts.wide$t <- 1:nrow(bsts.wide)
bsts.wide$t0 <- bsts.wide$t - intpd
# bsts.long <- gather(bsts.wide, point, val, point.effect:point.effect.upper, factor_key = T)
# ##
# print(bsts.long)
# ia <- as.data.frame(impact_amount$series)
# bsts.long <- rbind(
#   data.frame(variable='point.effect', value=ia$point.effect),
#   data.frame(variable='point.effect.lower', value=ia$point.effect.lower),
#   data.frame(variable='point.effect.upper', value=ia$point.effect.upper)
# )
p.bsts.impact <- ggplot(bsts.wide, aes(x=t0, y=point.effect)) +
geom_ribbon(aes(ymin=point.effect.lower,ymax=point.effect.upper), alpha=.25, size=.01, lty=1) +
geom_line(size=1.1, lty=1) +
# geom_point(aes(x=t, y=min),pch=1,alpha=.3) + geom_point(aes(x=t,y=max),pch=1,alpha=.3) +
geom_hline(yintercept=0) + geom_vline(xintercept=-0.5, lty=2) +
ylab('ATT') +  xlab('Event Time') + # facet_grid( effect.type ~ . ) +
theme_bw() + #theme(legend.position='bottom') +
ggtitle('BSTS CausalImpact: Pointwise Effect By Length of Exposure')
# ggtitle(sprintf('BSTS CausalImpact (p = %.3f)',
#                 ,pval.bsts.general))
## COMBINE TIMESERIES COMPARISON AND ERROR DISTRIBUTION PLOTS OUTPUT
# ggarrange(p.err2, p.err3, p.err1, ncol=2, nrow=2, widths = , common.legend = F)
ggdraw() +
draw_plot(p.ind.series, x= 0 , y= 4/5, width=1, height=1/5) +
draw_plot(p.agg.es, x=0, y=3/5, width=1, height=1/5) +  ## *** DiD ***
draw_plot(p.bsts.impact, x=0, y=2/5, width=1, height=1/5) +  ## *** BSTS ***
draw_plot(p.err1, x = 0,  y = 1/5, width = 1, height = 1/5) +
draw_plot(p.err2, x = 0,  y = 0, width = .5, height = 1/5) +
draw_plot(p.err3, x = .5, y = 0, width = .5, height = 1/5) +
draw_plot_label(label = c("A", "B", "C",'D','E','F'), size = 15,
x = c(0, 0, 0, 0, 0, .5), y = c(5/5, 4/5, 3/5, 2/5, 1/5, 1/5))
ggsave(filename = file.path(save.img.dir,
sprintf('%s_ATT_pointwise_error_distribution_compare_n%s_pd%s_ss%s_niter%s_%s_%s_%s.png',
prefix,n,npds,h,bsts.niter,key.strip,effect.type,sim.id)),
height=15, width=9, units = 'in', dpi = 300)
##===============================================================
## 1-step ahead prediction error
bsts.pred.er <- bsts.prediction.errors(impact_amount$model$bsts.model)$in.sample[,(1:(intpd-1))]
## Append results to output list
simlist[[key]]$compare$did[[effect.type]]$attgt <- ccattgt
simlist[[key]]$compare$did[[effect.type]]$agg.simple <- agg.simple
simlist[[key]]$compare$did[[effect.type]]$agg.es <- agg.es
simlist[[key]]$compare$did[[effect.type]]$self.select.cor <- self.select.cor
##
simlist[[key]]$compare$bsts[[effect.type]][[ h ]]$CausalImpact <- impact_amount
simlist[[key]]$compare$bsts[[effect.type]][[ h ]]$cumu.pred.error <-  cumsum(colSums(abs(bsts.pred.er)))
##
simlist[[key]]$compare$att.b3 <- att.b3
simlist[[key]]$compare$att.did <- att.did
simlist[[key]]$compare$att.bsts <- att.bsts
simlist[[key]]$compare$bias.bsts<- att.bsts - att.b3
simlist[[key]]$compare$bias.did <- att.did - att.b3
simlist[[key]]$compare$perf.adv.bsts <- abs(att.did - att.b3) / abs(att.bsts - att.b3)
##
simlist[[key]]$compare$res.tbl[[effect.type]][[ h ]] <- res.tbl
simlist[[key]]$compare$att.err.tbl[[effect.type]][[ h ]] <- errdf
simlist[[key]]$compare$att.err.mean.bsts[[effect.type]][[ h ]] <- mean(errdf$error[errdf$method=='BSTS'],na.rm = T)
simlist[[key]]$compare$att.err.mean.did[[effect.type]][[ h ]]  <- mean(errdf$error[errdf$method=='DiD'],na.rm = T)
simlist[[key]]$compare$att.err.sd.bsts[[effect.type]][[ h ]] <- sd(errdf$error[errdf$method=='BSTS'],na.rm = T)
simlist[[key]]$compare$att.err.sd.did[[effect.type]][[ h ]]  <- sd(errdf$error[errdf$method=='DiD'],na.rm = T)
} ## // end h loop over bsts.state components
} ## // end k loop over effect types
if ( ! is.na(save.items.dir) ) {
## Save simulation list as serialized data file
simlist.file <- sprintf('__GRIDSEARCH_output__n%s_pd%s_niter%s_%s_%s.rds', n, npds, bsts.niter, sim.id, key.strip)
save.file.path <-  file.path(save.items.dir, simlist.file)
saveRDS(simlist[[key]], file = save.file.path)
## FREE UP MEMORY
simlist[[key]] <- list(file = save.file.path)
}
} ## // end simlist loop i   ##  #; dev.off()
return(simlist)
}
################################################################################################################
################################################################################################################
